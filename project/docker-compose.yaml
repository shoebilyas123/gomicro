version: '3'

networks:
  default:
    name: gomicro

services:
  brokerservice:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - 8080:80
    deploy:
      mode: replicated
      replicas: 1
    hostname: brokersvc

  logsvc:
    build:
      context: ./../logsvc
      dockerfile: ./../logsvc/logsvc.dockerfile
    restart: always
    ports:
      - 8082:80
    deploy:
      mode: replicated
      replicas: 1
    hostname: logsvc

  authsvc:
    build:
      context: ./../auth-svc
      dockerfile: ./../auth-svc/auth-svc.dockerfile
    restart: always
    ports:
      - 8081:80
    deploy:
      mode: replicated
      replicas: 1
    hostname: authsvc
    environment:
      DSN: 'host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5'

  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - '27017:27017'
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo:/data/db

  postgres:
    image: 'postgres:14.2'
    ports:
      - '5432:5432'
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres:/var/lib/postgresql/data/

  rabbitmq:
    image: 'rabbitmq:3.12-alpine'
    ports:
      - 5672:5627
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/
